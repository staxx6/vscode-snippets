{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"header": {
		"prefix": "header",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"",
			"$1",
			"",
			"#endif /* ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H */"
		],
		"description": "Include guards for c headers"
	},
	"print_out": {
		"prefix": "out_print",
		"body": [
			"std::cout << \"$1\";",
		],
		"description": "Print a string with std::cout"
	},
	"print_out_ln": {
		"prefix": "out_print_ln",
		"body": [
			"std::cout << \"$1\" << std::endl;",
		],
		"description": "Print a string with std::cout and new line/flush"
	},
	"std::": {
		"prefix": "sa_std::", //sa for first match(shortcut like)
		"body": [
			"std::$1",
		],
		"description": "Use std namespace"
	},
	"string": {
		"prefix": "string_",
		"body": [
			"std::string $1",
		],
		"description": "Use string with std::"
	},
	"class": {
		"prefix": "class_",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
			"",
			"class $TM_FILENAME_BASE",
			"{",
			"public:",
			"\t$TM_FILENAME_BASE();",
			"\t~$TM_FILENAME_BASE();",
			"",
			"\t$1",
			"",
			"\t$TM_FILENAME_BASE(const $TM_FILENAME_BASE&);",
			"\t$TM_FILENAME_BASE & operator = (const $TM_FILENAME_BASE &);",
			"",
			"protected:",
			"\t",
			"",
			"private:",
			"\t",
			"};",
			"",
			"#endif /* ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H */"
		],
		"description": "Basic class header"
	},
	"getter": {
		"prefix": "getter",
		"body": [
			"$1 get$2() { return $3; }$4",
		],
		"description": "Create a getter function"
	},
	"setter": {
		"prefix": "setter",
		"body": [
			"void set$2($3) { $4 = $5; }$6",
		],
		"description": "Create a setter function"
	}
}